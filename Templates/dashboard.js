        // --- Modal ---        const backupModal = document.getElementById('backupModal');        const backupModalTitle = document.getElementById('backupModalTitle');        const backupModalBody = document.getElementById('backupModalBody');        const modalLoadingState = document.getElementById('modalLoadingState');        const backupList = document.getElementById('backupList');                async function showBackups(docId, docTitle) {            backupModalTitle.textContent = `Backups for "${docTitle}"`;            backupList.innerHTML = ''; // Clear previous list            modalLoadingState.style.display = 'block';            backupModal.style.display = 'flex';                        try {                const response = await fetch(`/api/document/${docId}/backups`);                if (!response.ok) throw new Error('Failed to fetch backups');                                const data = await response.json();                modalLoadingState.style.display = 'none';                                if (data.backups && data.backups.length > 0) {                    data.backups.forEach(backup => {                        const li = document.createElement('li');                        li.className = 'backup-item';                        li.innerHTML = `                            <span class="backup-date">${backup.datetime} UTC</span>                            <button class="btn btn-sm btn-primary" onclick="restoreBackup('${docId}', '${backup.timestamp}', '${docTitle}', '${backup.datetime}')">                                <span>ðŸ”„</span> Restore                            </button>                        `;                        backupList.appendChild(li);                    });                } else {                    backupList.innerHTML = '<li class="empty-state" style="padding: 20px;">No backups found.</li>';                }            } catch (error) {                modalLoadingState.style.display = 'none';                backupList.innerHTML = `<li class="empty-state" style="padding: 20px; color: #dc3545;">Error: ${error.message}</li>`;                console.error('Fetch backups error:', error);            }        }                async function restoreBackup(docId, timestamp, docTitle, datetime) {            if (confirm(`Are you sure you want to restore the backup from ${datetime} for "${docTitle}"?\n\nThe current version will be saved as a new backup before restoring.`)) {                showLoading(true);                closeModal();                                try {                    const response = await fetch(`/api/document/${docId}/restore/${timestamp}`, {                        method: 'POST'                    });                    if (response.ok) {                        alert('Document restored successfully!');                        window.location.reload();                    } else {                        const err = await response.json();                        throw new Error(err.message || 'Failed to restore backup.');                    }                } catch (error) {                    alert(`Error restoring backup: ${error.message}`);                } finally {                    showLoading(false);                }            }        }                function closeModal() {            backupModal.style.display = 'none';        }                // --- Document Actions ---        async function deleteDocument(docId, title) {            if (confirm(`Are you sure you want to delete "${title}"?\n\nThis action cannot be undone.`)) {                showLoading(true);                try {                    const response = await fetch(`/delete/${docId}`, { method: 'POST' });                    if (response.ok) {                        window.location.reload();                    } else {                        alert('Failed to delete document. Please try again.');                    }                } catch (error) {                    alert('Error deleting document.');                } finally {                    showLoading(false);                }            }        }                function showLoading(show) {            document.getElementById('loadingState').style.display = show ? 'block' : 'none';        }                // --- Event Listeners ---        document.addEventListener('DOMContentLoaded', () => document.getElementById('title')?.focus());                document.querySelector('.create-form').addEventListener('submit', function(e) {            const title = document.getElementById('title').value.trim();            if (!title) {                e.preventDefault();                alert('Please enter a document title.');            } else {                showLoading(true);            }        });                document.addEventListener('keydown', function(e) {            if ((e.ctrlKey || e.metaKey) && e.key === 'n') {                e.preventDefault();                document.getElementById('title')?.focus();            }            if (e.key === 'Escape') {                closeModal();            }        });                // Close modal if clicking on overlay        backupModal.addEventListener('click', function(e) {            if (e.target === backupModal) {                closeModal();            }        });